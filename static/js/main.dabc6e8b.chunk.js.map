{"version":3,"sources":["helpers/history.js","Components/privateRoute/index.js","Pages/FileUploader/dropzone/Dropzone.js","helpers/gh-helper.js","Controls/AutocompleteTextBox.js","Pages/FileUploader/upload/Upload.js","Components/navbar/index.js","Pages/FileUploader/index.js","Controls/Image.js","Components/imageExplorer/index.js","Pages/Home/index.js","Pages/Auth/Login/index.js","App.js","serviceWorker.js","index.js"],"names":["history","createBrowserHistory","PrivateRoute","Component","component","rest","render","props","sessionStorage","getItem","to","pathname","state","from","location","Dropzone","highlight","fileInputRef","React","createRef","openFileDialog","bind","onFilesAdded","onDragOver","onDragLeave","onDrop","this","disabled","current","click","evt","files","target","array","fileListToArray","event","preventDefault","disabed","setState","dataTransfer","list","i","length","push","item","className","onClick","style","cursor","ref","type","accept","multiple","onChange","alt","src","GithubAPI","auth","repo","filesToCommit","currentBranch","newCommit","gh","GitHub","getCurrentTreeSHA","getCommit","commitSHA","then","commit","treeSHA","data","tree","sha","createFile","fileInfo","createBlob","content","blob","path","mode","createTree","updateHead","name","setRepo","userName","repoName","getRepo","setBranch","branchName","listBranches","branches","find","branch","createBranch","pushFiles","message","hasOwnProperty","getRef","object","filesInfo","promises","Promise","all","createFiles","createCommit","catch","e","console","error","AutoCompleteTextBox","autoComplete","htmlFor","caption","onInput","id","placeholder","help","Upload","uploading","uploadProgress","successfullUploaded","gh_api","catalog","authorized","user","uploadFiles","onPathChanged","renderActions","api","token","JSON","parse","Application","attempt_set_api","prevState","concat","ev","value","slice","fnam","resolve","reject","fr","FileReader","onload","result","addEventListener","lengthComputable","copy","percentage","loaded","total","readAsText","that","filenames","map","f","upload","join","updateLoaded","res","status","setTimeout","Math","random","file","icon","faCheckCircle","faSpinner","key","renderProgress","NavBar","AppConfig","appname","UploadPage","Image","replace","round","onLoad","document","getElementById","classList","remove","revealOnSuccess","onError","contains","hideImageError","ImageExplorer","active","interval","updateImage","setInterval","img","log","title","showCarousel","Home","images","double","imgs","init_images","getImages","double_images","description","LoginPage","login","password","submitted","handleChange","handleSubmit","removeItem","setItem","stringify","onSubmit","faStop","renderLoginForm","App","exact","strict","Login","Boolean","window","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dabc6e8b.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\n const PrivateRoute = ({ component: Component, ...rest }) =>{\r\n    return (\r\n        <Route {...rest} render={props => (\r\n            sessionStorage.getItem('user')\r\n                ? <Component {...props} />\r\n                : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\r\n        )} />   \r\n    )\r\n}\r\nexport default PrivateRoute","import React, { Component } from \"react\";\r\nimport \"./Dropzone.css\";\r\n\r\nclass Dropzone extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { highlight: false };\r\n    this.fileInputRef = React.createRef();\r\n\r\n    this.openFileDialog = this.openFileDialog.bind(this);\r\n    this.onFilesAdded = this.onFilesAdded.bind(this);\r\n    this.onDragOver = this.onDragOver.bind(this);\r\n    this.onDragLeave = this.onDragLeave.bind(this);\r\n    this.onDrop = this.onDrop.bind(this);\r\n  }\r\n\r\n  openFileDialog() {\r\n    if (this.props.disabled) return;\r\n    this.fileInputRef.current.click();\r\n  }\r\n\r\n  onFilesAdded(evt) {\r\n    if (this.props.disabled) return;\r\n    const files = evt.target.files;\r\n    if (this.props.onFilesAdded) {\r\n      const array = this.fileListToArray(files);\r\n      this.props.onFilesAdded(array);\r\n    }\r\n  }\r\n\r\n  onDragOver(event) {\r\n    event.preventDefault();\r\n    if (this.props.disabed) return;\r\n    this.setState({ highlight: true });\r\n  }\r\n\r\n  onDragLeave(event) {\r\n    this.setState({ highlight: false });\r\n  }\r\n\r\n  onDrop(event) {\r\n    event.preventDefault();\r\n    if (this.props.disabed) return;\r\n    const files = event.dataTransfer.files;\r\n    if (this.props.onFilesAdded) {\r\n      const array = this.fileListToArray(files);\r\n      this.props.onFilesAdded(array);\r\n    }\r\n    this.setState({ highlight: false });\r\n  }\r\n\r\n  fileListToArray(list) {\r\n    const array = [];\r\n    for (var i = 0; i < list.length; i++) {\r\n      array.push(list.item(i));\r\n    }\r\n    return array;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className={`mx-auto Dropzone ${this.state.highlight ? \"Highlight\" : \"\"}`}\r\n        onDragOver={this.onDragOver}\r\n        onDragLeave={this.onDragLeave}\r\n        onDrop={this.onDrop}\r\n        onClick={this.openFileDialog}\r\n        style={{ cursor: this.props.disabled ? \"default\" : \"pointer\" }}\r\n      >\r\n        <input\r\n          ref={this.fileInputRef}\r\n          className=\"FileInput\"\r\n          type=\"file\"\r\n          accept=\".xml\"\r\n          multiple\r\n          onChange={this.onFilesAdded}\r\n        />\r\n        <img\r\n          alt=\"upload\"\r\n          className=\"Icon\"\r\n          src=\"baseline-cloud_upload-24px.svg\"\r\n        />\r\n        <span>Загрузить файлы</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dropzone;\r\n","import GitHub from 'github-api';\n\n//Uses the https://github.com/github-tools/github library under the hood and exposes it as `gh` property\nexport default function GithubAPI(auth) {\n    let repo;\n    let filesToCommit = [];\n    let currentBranch = {};\n    let newCommit = {};\n    \n    //the underlying library for making requests\n    let gh = new GitHub(auth);\n\n    /**\n     * Sets the current repository to make push to\n     * @public\n     * @param {string} userName Name of the user who owns the repository\n     * @param {string} repoName Name of the repository\n     * @return void\n     */\n    this.setRepo = function(userName, repoName) {\n        repo = gh.getRepo(userName, repoName);\n        return repo;\n    }\n\n    /**\n     * Sets the current branch to make push to. If the branch doesn't exist yet,\n     * it will be created first\n     * @public\n     * @param {string} branchName The name of the branch\n     * @return {Promise}\n     */\n    this.setBranch = function(branchName) {\n        if (!repo) {\n            throw 'Repository is not initialized';\n        }\n        \n\n        return repo.listBranches().then((branches) => {\n\n            let branchExists = branches.data.find( branch => branch.name === branchName );\n\n            if (!branchExists) {\n                return repo.createBranch('master', branchName)\n                    .then(() => {\n                        currentBranch.name = branchName;\n                    });\n            } else {\n                currentBranch.name = branchName;\n            }\n        });\n    }\n\n    /**\n     * Makes the push to the currently set branch\n     * @public\n     * @param  {string}   message Message of the commit\n     * @param  {object[]} files   Array of objects (with keys 'content' and 'path'),\n     *                            containing data to push\n     * @return {Promise}\n     */\n    this.pushFiles = function(message, files) {\n        if (!repo) {\n            throw 'Repository is not initialized';\n        }\n        \n        if (!currentBranch.hasOwnProperty('name')) {\n            throw 'Branch is not set';\n        }\n\n        return getCurrentCommitSHA()\n            .then(getCurrentTreeSHA)\n            .then( () => createFiles(files) )\n            .then(createTree)\n            .then( () => createCommit(message) )\n            .then(updateHead)\n            .catch((e) => {\n                console.error(e);\n            });\n    }\n\n    /**\n     * Sets the current commit's SHA\n     * @private\n     * @return {Promise}\n     */\n    function getCurrentCommitSHA() {\n        return repo.getRef('heads/' + currentBranch.name)\n            .then((ref) => {\n                currentBranch.commitSHA = ref.data.object.sha;\n            });\n    }\n\n    /**\n     * Sets the current commit tree's SHA\n     * @private\n     * @return {Promise}\n     */\n    function getCurrentTreeSHA() {\n        return repo.getCommit(currentBranch.commitSHA)\n            .then((commit) => {\n                currentBranch.treeSHA = commit.data.tree.sha;\n            });\n    }\n\n    /**\n     * Creates blobs for all passed files\n     * @private\n     * @param  {object[]} filesInfo Array of objects (with keys 'content' and 'path'),\n     *                              containing data to push\n     * @return {Promise}\n     */\n    function createFiles(filesInfo) {\n        let promises = [];\n        let length = filesInfo.length;\n\n        for (let i = 0; i < length; i++) {\n            promises.push(createFile(filesInfo[i]));\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Creates a blob for a single file\n     * @private\n     * @param  {object} fileInfo Array of objects (with keys 'content' and 'path'),\n     *                           containing data to push\n     * @return {Promise}\n     */\n    function createFile(fileInfo) {\n        return repo.createBlob(fileInfo.content)\n            .then((blob) => {\n                filesToCommit.push({\n                    sha: blob.data.sha,\n                    path: fileInfo.path,\n                    mode: '100644',\n                    type: 'blob'\n                });\n            });\n    }\n\n    /**\n     * Creates a new tree\n     * @private\n     * @return {Promise}\n     */\n    function createTree() {\n        return repo.createTree(filesToCommit, currentBranch.treeSHA)\n            .then((tree) => {\n                newCommit.treeSHA = tree.data.sha;\n            });\n    }\n\n    /**\n     * Creates a new commit\n     * @private\n     * @param  {string} message A message for the commit\n     * @return {Promise}\n     */\n    function createCommit(message) {\n        return repo.commit(currentBranch.commitSHA, newCommit.treeSHA, message)\n            .then((commit) => {\n                newCommit.sha = commit.data.sha;\n            });\n    }\n\n    /**\n     * Updates the pointer of the current branch to point the newly created commit\n     * @private\n     * @return {Promise}\n     */\n    function updateHead() {\n        return repo.updateHead('heads/' + currentBranch.name, newCommit.sha);\n    }\n};","import React, { Component } from 'react';\n\nclass AutoCompleteTextBox extends Component {\n    constructor(props) {\n        super(props);\n        this.autoComplete = this.autoComplete.bind(this)\n    }\n    \n    autoComplete(e){\n        \n    }\n    render () {\n        return (\n            <div className={this.props.className}>\n                <label htmlFor={this.props.name}>{this.props.caption}</label>\n                <input \n                    type = \"text\"\n                    className=\"form-control\" \n                    onInput={this.autoComplete}\n                    onChange={this.props.onChange}\n                    id={this.props.name}\n                    name={this.props.name}\n                    placeholder={this.props.placeholder}                \n                    />\n                <span className=\"muted small\">\n                    {this.props.help}\n                </span>\n            </div>\n        );\n    }        \n}\nexport default AutoCompleteTextBox\n  \n  ","import React, { Component } from \"react\";\r\nimport Dropzone from \"../dropzone/Dropzone\";\r\nimport \"./Upload.css\";\r\nimport GithubAPI from \"../../../helpers/gh-helper\"\r\nimport Application from \"../../../Configs/package\"\r\nimport AutoCompleteTextBox from \"../../../Controls/AutocompleteTextBox\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSpinner, faCheckCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\n\r\n\r\nclass Upload extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      files: [],\r\n      uploading: false,\r\n      uploadProgress: {},\r\n      successfullUploaded: false,\r\n      gh_api : {},\r\n      catalog: \"\",\r\n      authorized: false,\r\n      user: {}\r\n    };\r\n\r\n    this.onFilesAdded = this.onFilesAdded.bind(this);\r\n    this.uploadFiles = this.uploadFiles.bind(this);\r\n    this.onPathChanged = this.onPathChanged.bind(this);\r\n    this.renderActions = this.renderActions.bind(this);\r\n  }\r\n  componentDidMount(){\r\n    let user = sessionStorage.getItem(\"user\");\r\n    if(user){\r\n      user = JSON.parse(user);\r\n\r\n      const api = new GithubAPI({\r\n        token: user.token\r\n      })  \r\n      api.setRepo(user.name, Application.repo);\r\n\r\n      let attempt_set_api = api.setBranch(Application.branch);\r\n\r\n      attempt_set_api.then(() => {\r\n          this.setState({ authorized: true, user : user, gh_api: api });\r\n      })\r\n\r\n      attempt_set_api.catch((e) => {\r\n        this.setState({ authorized: false, user : user });\r\n      })\r\n    }\r\n  \r\n  }\r\n  onFilesAdded(files) {\r\n    this.setState(prevState => ({\r\n      files: prevState.files.concat(files)\r\n    }));\r\n  }\r\n\r\n  onPathChanged(ev) {\r\n    let path = ev.target.value;\r\n\r\n    if(path[path.length - 1] !== \"/\"){\r\n      path += \"/\"\r\n    }\r\n    if(path[0] === \"/\"){\r\n      path = path.slice(1);\r\n    }\r\n\r\n    this.setState({catalog: path});\r\n  }\r\n  async uploadFiles() {\r\n    this.setState({ uploadProgress: {}, uploading: true });\r\n    let api = this.state.gh_api\r\n    const promises = [];\r\n  \r\n    for(let i = 0; i < this.state.files.length; ++i){\r\n  \r\n      let fnam = this.state.files[i].name\r\n\r\n      promises.push(new Promise((resolve, reject) => {\r\n        var fr = new FileReader();  \r\n        fr.onload = () => {\r\n          resolve({ name: fnam, path: Application.path + this.state.catalog + fnam, content:  fr.result } )\r\n        };\r\n        fr.addEventListener('progress', (event)=>{\r\n          if (event.lengthComputable) {\r\n            const copy = { ...this.state.uploadProgress };\r\n            copy[fnam] = {\r\n              state: \"pending\",\r\n              percentage: (event.loaded / event.total) \r\n              * 100\r\n            };\r\n            this.setState({ uploadProgress: copy });\r\n          }\r\n        });\r\n        fr.readAsText(this.state.files[i], \"UTF-8\"); \r\n      }));\r\n    }\r\n\r\n    try {\r\n      let that = this;\r\n      Promise.all(promises).then(function(files){\r\n        let filenames = files.map(f => f.name);\r\n        let upload = api.pushFiles(\"file uploads: \" + filenames.join(\", \"), files);        \r\n\r\n        let updateLoaded = (f) => {\r\n          const copy = { ...that.state.uploadProgress };\r\n          copy[f] = { state: \"done\", percentage: 100 };\r\n          that.setState({ uploadProgress: copy });           \r\n        }\r\n\r\n        upload.then((res) => {\r\n          if(res){\r\n            if(res.status === 200){\r\n                for (var i = 0; i < filenames.length; ++i){\r\n                  setTimeout(updateLoaded(filenames[i]), Math.random()*10000)\r\n                }\r\n              }\r\n          }          \r\n        })\r\n        upload.catch((e) => {\r\n          for (var i = 0; i < filenames.length; ++i){\r\n            const copy = { ...that.state.uploadProgress };\r\n            copy[filenames[i]] = { state: \"fail\", percentage: 100 };\r\n            that.setState({\r\n              successfullUploaded : false,\r\n              uploadProgress: copy\r\n            })\r\n          }\r\n        })\r\n      });\r\n      \r\n\r\n      this.setState({ successfullUploaded: true, uploading: false });\r\n    } catch (e) {\r\n      this.setState({ successfullUploaded: true, uploading: false });\r\n    }\r\n  }\r\n\r\n  renderProgress(file) {\r\n    const uploadProgress = this.state.uploadProgress[file.name];\r\n    if (this.state.uploading || this.state.successfullUploaded) {\r\n      return (\r\n        <span className=\"d-inline pl-3\">\r\n            <FontAwesomeIcon icon={faCheckCircle} className={uploadProgress && uploadProgress.state === \"done\"?\r\n            \"text-secondary\" : \"d-none\" } />\r\n             <FontAwesomeIcon icon={faSpinner} className={uploadProgress && uploadProgress.state === \"done\"?\r\n          \"d-none\" : \"text-warning fa-spin\"} />                   \r\n        </span>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderActions() {\r\n    if (this.state.successfullUploaded) {\r\n      return (\r\n        <button\r\n          onClick={() =>\r\n            this.setState({ files: [], successfullUploaded: false })\r\n          }\r\n        >\r\n          Очистить\r\n        </button>\r\n      );\r\n    } else {\r\n      return (\r\n        <button\r\n          disabled={this.state.files.length < 0 || this.state.uploading}\r\n          onClick={this.uploadFiles}\r\n          className=\"px-5\"\r\n        >\r\n          Загрузить\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.authorized){  \r\n      return (\r\n        <div className=\"container-fluid\">\r\n          <div className=\"col-12\">\r\n            <span className=\"Title py-3\">Загрузка файлов</span>\r\n            <div className=\"row pt-3\">\r\n              <AutoCompleteTextBox \r\n                name=\"auto-complete-catalogs\" \r\n                caption=\"каталог файлов\" \r\n                className=\"col-12 px-0 border-bottom form-group text-left py-3 mb-3\" \r\n                help=\"Определить в какую группу отправить файлы. e.g. vsuet/vosdux\" \r\n                placeholder=\"\" \r\n                onChange={this.onPathChanged}\r\n                />\r\n              <div className=\"col-12 col-md-8 col-lg-6\"> \r\n                <Dropzone\r\n                  onFilesAdded={this.onFilesAdded}\r\n                  disabled={this.state.uploading || this.state.successfullUploaded}\r\n                />\r\n                <div className=\"col-12 text-center py-3\">{this.renderActions()}</div>\r\n              </div>\r\n              <div className=\"col-12 col-md-4 col-lg-6\">\r\n                <div className=\"row text-left\">\r\n                  {this.state.files.map(file => {\r\n                    return (\r\n                      <div key={file.name} className=\"col-12 col-lg-6\">\r\n                        <span className=\"\">{file.name}</span>\r\n                        {this.renderProgress(file)}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>            \r\n              </div>\r\n            </div>\r\n            \r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return \"загрузка ....\";\r\n  }\r\n}\r\n\r\nexport default Upload;\r\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport AppConfig from \"../../Configs/package\";\n\nconst NavBar = (props) => {\n  return (\n    <nav className={\"navbar navbar-dark bg-primary fixed-top\" + props.className} >\n      <Link className=\"nav-item text-white\" to=\"/\">\n        {AppConfig.appname}\n      </Link>\n      {/* <Link className=\"nav-item text-white\" to=\"/models\">\n        Модели\n      </Link>\n      <Link className=\"nav-item text-white\" to=\"/noses\">\n        Электроные носы\n      </Link> */}\n      <Link className=\"nav-item text-white\" to=\"/test\">\n        Bring your image\n      </Link>\n    </nav>\n  );\n}\n\nexport default NavBar;","import React, { Component } from \"react\";\nimport \"./index.css\";\nimport Upload from \"./upload/Upload\";\nimport NavBar from \"../../Components/navbar\";\n\nclass UploadPage extends Component {\n  render() {\n    return (\n      <div className=\"\">\n        <NavBar className=\"mb-5\" /> \n        <div className=\"Page\">\n          <div className=\"card mt-3 mt-md-4 p-3 col-10 col-md-9 col-lg-8 col-xl-7\">\n            <Upload />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UploadPage;\n","import React from 'react';\n\nfunction hideImageError(id) {\n    let classlist = document.getElementById(id).classList \n    if (classlist.contains(\"d-none\"))\n        return \n    document.getElementById(id).classList += \" d-none\";\n}\n\nfunction revealOnSuccess(id){\n    document.getElementById(id).classList.remove(\"invisible\")\n    document.getElementById(id).classList.remove(\"d-none\")\n}\n\nconst Image = (props) => {\n    let id = \"image-block\" + props.name.replace(/[^\\w\\s\\_]/g, \"\").replace(/\\s+| /g, \"\") + Math.round(Math.random()*1000)\n    return (\n        <div id={id} className=\"col-12 invisible\">\n            <h6>{props.name}</h6>\n            <img className=\"img-thumbnail border-0 img-fluid  float-right\"  src={props.src} alt=\"\" onLoad={() => {revealOnSuccess(id) }} onError={()=> hideImageError(id)} />\n        </div>        \n    );    \n}\nexport default Image\n  \n  ","import React, {Component} from \"react\";\nimport ImageCtrl from \"../../Controls/Image\";\n\n\nclass ImageExplorer extends Component {\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            active : 0,\n            interval : 5000,\n            list : this.props.list\n        }\n    }\n    componentDidMount(){\n        this.updateImage();\n    }\n\n    updateImage(){\n        let interval = setInterval(() => {\n            let active = this.state.active;\n\n            if(active === this.state.list.length - 1){\n                active = -1;\n            }\n            active += 1;\n\n            this.setState({\n                active : active\n            })\n        }, this.state.interval);\n\n        return interval\n    }\n\n    showCarousel(){\n        let img = this.state.list[this.state.active];\n        console.log(img);\n        let name = img.replace(\".png\", \"\").replace(\".jpg\", \"\");\n        \n        return <ImageCtrl name={name} src={img} />\n    }\n    render(){\n        return <div className=\"col-12\">\n                    <h4 className=\"col-12\">\n                        {this.props.title}\n                    </h4>\n                    <div className=\"col-12 image-review\">\n                        {this.showCarousel()}\n                    </div>\n                </div>;\n    }\n}\n\nexport default ImageExplorer;","import React from 'react';\nimport NavBar from \"../../Components/navbar\";\nimport AppConfig from \"../../Configs/package\";\nimport ImageExplorer from \"../../Components/imageExplorer\";\n\n\nclass  Home  extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            images : {\n                title: \"Stock Cyclic\",\n                list : \"init\",\n                double : \"images\"\n            }\n        }\n    }\n    getImages(){\n        let imgs = [];\n        let init_images = [];\n        let path = \"/samples/\";\n\n        for(let i = 10; i < 630; i += 10){\n            if (i < 100){\n                init_images.push( path + \"train_g_init_\" + i + \".png\");\n            }\n            imgs.push( path + \"train_g_\"+i + \".png\");\n        }\n        return {\n            \"images\" : imgs,\n            \"init\"  :   init_images\n        }\n    }\n    render(){\n        let images = this.getImages()[this.state.images.list]\n        let double_images = this.getImages()[this.state.images.double]\n        return (\n            <div className=\"\">\n                <NavBar className=\"mb-5\" />            \n                <div className=\"container-fluid mt-3\">\n                    <div className=\"col-12 h3\">\n                        Welcome to {AppConfig.appname} \n                    </div>\n                    <div className=\"col-12\">\n                        {AppConfig.description} \n                    </div>\n                    <div className=\"container-fluid\">\n                        <div className=\"row\">\n                            <div className=\"col-2\">\n\n                            </div>\n                            <div className=\"col-10\">\n                                <ImageExplorer list={images} title={this.state.images.title}/>\n                            </div>\n                            <div className=\"col-2\">\n\n                            </div>\n                            <div className=\"col-10\">\n                                <ImageExplorer list={double_images} title=\"\"/>\n                            </div>\n                        </div>                                            \n                    </div>\n                </div>\n            </div>      \n        );\n    }    \n  }\n\n  export default Home;\n  ","import React from 'react';\nimport { Redirect } from 'react-router-dom'\nimport GithubAPI from \"../../../helpers/gh-helper\"\nimport Application from \"../../../Configs/package\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSpinner, faStop} from '@fortawesome/free-solid-svg-icons'\n\nclass LoginPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            login: '',\n            password: '',\n            submitted: false,\n            user : {},\n            error: false\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    componentDidMount(){\n        sessionStorage.removeItem('user');\n    }\n\n    handleChange(e) {\n        const { name, value } = e.target;\n        this.setState({ [name]: value });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        const { login, password } = this.state;\n        this.setState({submitted: true})\n        let user = {\n            \"name\" : login,\n            \"token\" : password\n        }\n        const api = new GithubAPI({\n            token: user.token\n        });\n\n        api.setRepo(user.name, Application.repo);\n\n        let attempt_set_api = api.setBranch(Application.branch);\n\n        attempt_set_api.then(() => {\n            sessionStorage.setItem(\"user\", JSON.stringify(user));\n            this.setState({ submitted: true, user : user });\n        })\n\n        attempt_set_api.catch((e) => {\n            this.setState({error: true})\n        })\n    }\n\n    renderLoginForm() {\n        const { login, password, submitted, error } = this.state;\n        return (\n            <div className=\"container p-5\">\n                <form className=\"row mt-5 p-md-5 bg-primary text-white max-w-600px mx-auto\" onSubmit={this.handleSubmit}>\n                    <div className={error ? \"col-12 text-danger\": \"invisible col-12\"}>\n                        Пользователь не аутентифицирован\n                    </div>\n                    <div className='form-group col-12'>\n                        <label htmlFor=\"login\">логин</label>\n                        <input\n                            type=\"text\"\n                            name=\"login\"\n                            value={login}\n                            className={\"form-control col-12 mb-3\" + (submitted && !login ? ' border-danger' : '')}\n                            onChange={this.handleChange}\n                        />\n                        {submitted && !login &&\n                            <div className=\"text-danger\">обязателная поля</div>\n                        }\n                    </div>\n                    <div className='form-group col-12'>\n                        <label htmlFor=\"password\">пароль</label>\n                        <input\n                            type=\"password\"\n                            name=\"password\"\n                            value={password}\n                            className={\"form-control col-12 mb-3\" + (submitted && !password ? ' border-danger' : '')}\n                            onChange={this.handleChange}\n                        />\n                        {submitted && !password &&\n                            <div className=\"text-danger\">обязателная поля</div>\n                        }\n                    </div>\n                    <div className=\"form-group col-12\">\n                        <button \n                            type=\"submit\"\n                            className=\"form-control col-12 mb-3\"\n                        >\n                            Войти &nbsp;\n                            {\n                                submitted ?\n                                <FontAwesomeIcon icon={faStop} className={error?\n                                \"text-danger d-none\" : \"d-none\"} /> : \"\"\n                            }\n                            {\n                                submitted ?\n                                <FontAwesomeIcon icon={faSpinner} className={error?\n                                    \"d-none\" : \"text-success\"} /> : \"\"\n                            }\n                                \n                        </button>\n                        \n                    </div>\n                </form>\n            </div>\n        );\n    }\n\n    render() {\n        return this.state.user.token\n            ? <Redirect to={{ pathname: '/', state: { from: \"/login\" } }} />\n            : this.renderLoginForm();\n    }\n}\n\nexport default LoginPage","import React, { Component } from 'react';\nimport { Router, Route } from 'react-router-dom';\nimport { history } from './helpers/history';\nimport PrivateRoute from \"./Components/privateRoute\"\n\n\nimport UploadPage from \"./Pages/FileUploader\";\nimport Home from \"./Pages/Home\";\nimport Login from \"./Pages/Auth/Login\";\n\nimport './Css/bootstrap.css';\nimport './Css/App.css';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router history={history}>     \n          <Route exact strict path=\"/login\" component={Login} />\n          <Route exact strict path=\"/\" component={Home} />\n          <PrivateRoute exact strict path=\"/test\" component={UploadPage} />\n          <Route exact strict path=\"/srgan-investigation/login\" component={Login} />\n          <Route exact strict path=\"/srgan-investigation/\" component={Home} />\n          <PrivateRoute exact strict path=\"/srgan-investigation/test\" component={UploadPage} />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}